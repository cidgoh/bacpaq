/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_NANOPORE_FASTQ {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/CAT_NANOPORE_FASTQ" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PORECHOP_ABI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/PORECHOP_ABI" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '-abi -tmp ./tmp'
        ext.prefix = { "${meta.id}.trimmed" }
    }

    withName: NANOCOMP {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/NANOCOMP" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: PYCOQC {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/PYCOQC" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: RASUSA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RASUSA" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:SEQQC:TAXONOMY_QC:SAMTOOLS_VIEW' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SAMTOOLS_VIEW" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '-f4 -b'
        ext.prefix = { "${meta.id}.dehosted" }
    }

    withName: SAMTOOLS_FASTQ {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SAMTOOLS_FASTQ" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SAMTOOLS_FLAGSTAT" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_SORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SAMTOOLS_SORT" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SAMTOOLS_INDEX" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/KRAKEN2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: BRACKEN_BRACKEN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/BRACKEN" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}.bracken.report" }
    }

    withName: KRAKENTOOLS_KREPORT2KRONA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/KRAKENTOOLS_KREPORT2KRONA" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONFINDR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/CONFINDR" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: AGGREGATE_CONFINDR_RESULTS {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/CONFINDR_RESULTS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/MINIMAP2_ALIGN" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { "${meta.mode}" == 'illumina' ? '-ax sr' : '-ax map-ont' }
    }

    withName: RAW_FASTQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RAW_FASTQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: TRIM_FASTQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/TRIM_FASTQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.trimmed" }
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/FASTP" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: KRONA_KTIMPORTTAXONOMY {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/KRONA_KTIMPORTTAXONOMY" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: KRONA_KTIMPORTTEXT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/KRONA_KTIMPORTTEXT" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: KRONA_KTUPDATETAXONOMY {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/KRONA_KTUPDATETAXONOMY" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: 'MULTIQC' {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/MULTIQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*'
        ]
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
    }

    withName: TRIMMOMATIC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/TRIMMOMATIC" },
            mode: params.publish_dir_mode
        ]
        ext.args2 = 'ILLUMINACLIP:adapters.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36'
    }


    withName: DRAGONFLYE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/DRAGONFLYE" },
            mode: params.publish_dir_mode,
            pattern: '*.{gfa,log,fasta,fa,txt}'
        ]
        ext.args = "--minreadlen ${params.min_input_read_len} \
                    --gsize ${params.assembly_genomesize} \
                    --minquality ${params.min_input_quality} \
                    --minlen ${params.min_contig_len} \
                    --mincov ${params.min_contig_coverage} \
                    --racon ${params.racon_rounds} \
                    --medaka ${params.medaka_rounds} \
                    --model ${params.medaka_model}"
        errorStrategy = 'ignore'
    }

    withName: FLYE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/FLYE" },
            mode: params.publish_dir_mode,
            pattern: '*.{gfa.gz,log,fasta.gz,fa.gz,txt,gv.gz,json}'
        ]
        ext.prefix = {"${meta.id}_${meta.mode}"}
        errorStrategy = 'ignore'
    }

    withName: MEDAKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/FLYE" },
            mode: params.publish_dir_mode,
            pattern: '*.fa.gz',
            saveAs: { file -> file.replaceAll(".fa.gz", ".polished.fa.gz") }
        ]
        ext.prefix = {"${meta.id}_${meta.mode}"}
        errorStrategy = 'ignore'
    }

    withName: SHOVILL {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/SHOVILL" },
            mode: params.publish_dir_mode,
            pattern: '*.{gfa,log,fasta,yml,corrections,LastGraph}'
        ]
        ext.args = "--assembler ${params.sr_assembler} \
                    --gsize ${params.assembly_genomesize} \
                    --minlen ${params.min_contig_len} \
                    --mincov ${params.min_contig_coverage}"
        errorStrategy = 'ignore'
    }

    withName: RENAME_CTG {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RENAME_CTG" },
            mode: params.publish_dir_mode,
            pattern: '*.fa'
        ]
        ext.prefix = {"${meta.id}_${meta.mode}"}
    }

    if ( params.combine_quast ) {
        withName: QUAST {
            publishDir = [
                path: { "${params.outdir}/AGGREGATE/QUAST_COMBINE" },
                mode: params.publish_dir_mode
            ]
            errorStrategy = 'ignore'
            containerOptions = '--writable-tmpfs --no-home --cleanenv'
        }
    } else {
        withName: QUAST {
            publishDir = [
                path: { "${params.outdir}/AGGREGATE/QUAST" },
                mode: params.publish_dir_mode
            ]
            errorStrategy = 'ignore'
            containerOptions = '--writable-tmpfs --no-home --cleanenv'
        }
    }

    withName: BUSCO {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/BUSCO" },
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ]
        ext.args = '--mode genome --tar'
        errorStrategy = 'ignore'
    }

    withName: RMLST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RMLST" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        errorStrategy = 'ignore'
    }

    withName: RMLSTPARSE {
        publishDir = [
            [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RMLSTparsed/summary" },
            mode: params.publish_dir_mode,
            pattern: '*_sum.csv'
            ],
            [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RMLSTparsed/allele" },
            mode: params.publish_dir_mode,
            pattern: '*_allele.csv'
            ]
        ]
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/PROKKA" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = "--force"
        ext.prefix = { "${meta.id}_${meta.mode}_prokka" }
    }

    withName: CHECKM_LINEAGEWF {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/CHECKM" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/BAKTA_BAKTADBDOWNLOAD" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.args = '--type light'
    }

    withName: BAKTA_BAKTA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/BAKTA" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.prefix = { "${meta.id}_${meta.mode}_bakta" }
    }

    withName: VIRSORTER2_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/VIRSORTER2" },
            mode: params.publish_dir_mode
        ]
        ext.args = "--include-groups $params.virsorter_virus_grp \
                    --min-length $params.virsorter_min_len \
                    --min-score $params.virsorter_min_score"
        containerOptions = '--writable-tmpfs --no-home --cleanenv'
    }

    withName: VIRSORTER2_SETUP {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/VIRSORTER2_SETUP" },
            mode: params.publish_dir_mode
        ]
        containerOptions = '--writable-tmpfs --no-home --cleanenv'
    }

    withName: PANAROO_RUN {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/PANGENOME/PANAROO" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.args = "--clean-mode ${params.clean_mode} \
                    --remove-invalid-genes"
    }

    withName: ROARY {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/PANGENOME/ROARY" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: PIRATE {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/PANGENOME/PIRATE" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: PEPPAN {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/PANGENOME/PEPPAN" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: MOBSUITE_RECON {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/MOBSUITE" },
            mode: params.publish_dir_mode
            ]
        ext.args = {"--outdir ${params.outdir}/${meta.id}/${meta.mode}/MOBSUITE \
                    --force"}
        ext.prefix = { "${meta.id}" }
    }

    withName: PLASMIDFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/PLASMIDFINDER" },
            mode: params.publish_dir_mode
        ]
    }

    withName: RESFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RESFINDER" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.args = { (params.resfinder_species == "other" ? '' : "--point" ) +
                    "-s ${params.resfinder_species} \
                    --acquired \
                    --db_path_res ${params.resfinder_db} \
                    --db_path_point ${params.pointfinder_db}"
                    }
    }

    withName: ABRICATE_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/ABRICATE" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: ABRICATE_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/ABRICATE_SUMMARY" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.prefix = { "${meta.id}.abricate_summary" }
    }

    withName: AMRFINDERPLUS_UPDATE {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/AMRFINDERPLUS_UPDATE" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/AMRFINDERPLUS" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: RGI_MAIN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/RGI" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
    }

    withName: ABRITAMR_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/ABRITAMR" },
            mode: params.publish_dir_mode,
            pattern: '*'
        ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: CCTYPER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${meta.mode}/CCTYPER" },
            mode: params.publish_dir_mode
            ]
        ext.args = '--no_plot'
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: NUCMER_SAM {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/NUCMER" },
            mode: params.publish_dir_mode,
            pattern: '*.fixed.sam',
            saveAs: { filename -> filename.replace(".fixed", "") }
            ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:VARIANT_DETECTION:VARIANT_CALLING:SAMTOOLS_VIEW' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/NUCMER" },
            mode: params.publish_dir_mode
        ]
        ext.args = '--output-fmt bam'
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:VARIANT_DETECTION:VARIANT_CALLING:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/NUCMER" },
            mode: params.publish_dir_mode
            ]
        ext.prefix = { "${meta.id}_${meta.mode}.sorted" }
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:VARIANT_DETECTION:VARIANT_CALLING:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}" },
            pattern: 'null'
        ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: NUCMER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/NUCMER" },
            mode: params.publish_dir_mode
            ]
    }

    withName: DELTA2VCF {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/NUCMER" },
            mode: params.publish_dir_mode
            ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: SNIPPY_CORE {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/VARIANTS/CORE_ALN" },
            mode: params.publish_dir_mode
            ]
    }

    withName: CORESNPFILTER {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/VARIANTS/CORE_ALN" },
            mode: params.publish_dir_mode
            ]
        ext.args = { "--core ${params.snp_threshold}" }
    }

    withName: FAI2BED {
        publishDir = [
            path: { "${params.outdir}" },
            pattern: 'null'
            ]
    }

    withName: SNIPPY_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/SNIPPY" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                return filename.replaceAll('^.+/', '')
            }
        ]
        ext.args = { "--mincov ${params.snp_mincov} --minqual ${params.snp_minqual}"
        }
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: IGVREPORTS_VCF {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/VARIANTS/IGVREPORTS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('igv_report.html') ? 'igv_vcf_report.html' : null }
        ]
    }

    withName: IGVREPORTS_BAM {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/VARIANTS/IGVREPORTS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('igv_report.html') ? 'igv_bam_report.html' : null }
        ]
    }

    withName: IQTREE {
        publishDir = [
            path: { "${params.outdir}/AGGREGATE/VARIANTS/TREE/IQTREE" },
            mode: params.publish_dir_mode
        ]
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:VARIANT_DETECTION:VARIANT_CALLING:MEDAKA_VARIANT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/VARIANTS/MEDAKA" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                return filename.replaceAll('^.+/', '')
            }
        ]
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: 'NFCORE_BACPAQ:BACPAQ:VARIANT_DETECTION:VARIANT_VIS:SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}" },
            pattern: 'null'
        ]
    }

    withName: 'TABIX_TABIX' {
        ext.args = '-p vcf'
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

    withName: 'TABIX_BGZIP' {
        ext.prefix = { "${meta.id}_${meta.mode}" }
    }

}
